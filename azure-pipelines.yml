# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main
  - users/wcamargo/*

pool:
  MSHosted-WorkloadsPool

  # vmImage: windows-latest

variables:
  - group: azdo-psrule-run

steps:
  # - task: NuGetAuthenticate@1
  #   inputs:
  #     feedUrl: "https://pkgs.dev.azure.com/<organization>/ssc-set/_packaging/<organization>-ssc-set-psmod-dev-feed/nuget/v3/index.json"

  # - task: PowerShell@2
  #   inputs:
  #     targetType: "inline"
  #     script: |

  - powershell: |
      # Import-Module Microsoft.PowerShell.Security
      Get-Module -ListAvailable -Name PowerShellGet -Refresh

      # Install-Module -Name PowerShellGet -Force -AllowClobber

      Install-Module -Name PowerShellGet -Force -AllowClobber

      Install-Module Microsoft.PowerShell.SecretManagement -Force -AllowClobber
      Install-Module Microsoft.PowerShell.SecretStore -Force -AllowClobber

      # Install-Module Microsoft.PowerShell.PSResourceGet -Force
      # # Import-Module Microsoft.PowerShell.Security
      # Import-Module Microsoft.PowerShell.PSResourceGet 


      # Write-Host "Converting PAT Token to secure string..."
      # $securePatToken = ConvertTo-SecureString "$(AZDO-PAT)" -AsPlainText -Force

      # Write-Host "Creating credential..."

      # $credential = New-Object System.Management.Automation.PSCredential ("$(patUser)", $securePatToken)

      # $publishFeed = "tcsnlps-ssc-set-psmod-dev-feed"

      # Write-Host "Registering Nuget Repository..."

      # Install-PackageProvider NuGet -Scope CurrentUser -Force > $null

      # Write-Host "Registering Azure DevOps Artifacts as Upstream Repository..."

      # if ($null -eq (Get-PSRepository -Name $(publishFeed) -ErrorAction SilentlyContinue))
      # {
      #   Register-PSRepository -Name $(publishFeed) -SourceLocation "https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v2" -PublishLocation "https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v2" -InstallationPolicy Trusted -Credential $credential
      # }

      # # /\ Above its working!


      # Write-Host "Install PSResourceGet Module"

      # # Install-PSResource -Name Microsoft.PowerShell.PSResourceGet
      # # Install-Module Microsoft.PowerShell.PSResourceGet -Repository PSGallery -Force
      # # Install-Module Microsoft.PowerShell.PSResourceGet -Force
      # # Import-Module Microsoft.PowerShell.Security
      # # Import-Module Microsoft.PowerShell.PSResourceGet 

      # Get-ChildItem -Recurse "C:\Users\VssAdministrator\AppData\Local"

      # $packagePath = "$(Build.ArtifactStagingDirectory)\src\PSRule.Rules.AzureDevOps"      

      # Write-Host $packagePath
      # Write-Host $publishFeed

      # Get-ChildItem $(Build.SourcesDirectory) -Recurse

      # Write-Host "Publishing package '$packagePath' to feed '$publishFeed'"
      # Publish-PSResource -Path $packagePath -Repository $publishFeed -ApiKey 123

      # # /\ Old version


      # $artifactFeed = 'https://pkgs.dev.azure.com/<your org>/<you-project>/_packaging/<Feed-Name>/nuget/v3/index.json'
      # $password = "tempPasswordToSecureTheSecretVault" | ConvertTo-SecureString -AsPlainText -Force
      # Register-SecretVault -Name "TheSecretVault" -ModuleName Microsoft.PowerShell.SecretStore
      # $storeConfiguration = @{
      #     Authentication = 'Password'
      #     PasswordTimeout = 3600 # 1 hour
      #     Interaction = 'None'
      #     Password = $password
      #     Confirm = $false
      # }
      # Set-SecretStoreConfiguration @storeConfiguration
      # Unlock-SecretStore $password

      # $accessToken = "$env:SYSTEM_ACCESSTOKEN" | ConvertTo-SecureString -AsPlainText -Force
      # $credsAzureDevopsServices = New-Object System.Management.Automation.PSCredential("xxx", $accessToken)
      # Set-Secret -Name "MyCredential" -Secret $credsAzureDevopsServices -Vault "TheSecretVault" 

      # $CredentialInfo = [Microsoft.PowerShell.PSResourceGet.UtilClasses.PSCredentialInfo]::new('TheSecretVault', 'MyCredential')
      # Register-PSResourceRepository -Name "PSGalleryUpstream" -Uri "$artifactFeed" -Credential $CredentialInfo
      # Install-PSResource -Name "Az.Advisor" -Repository "PSGalleryUpstream" -TrustRepository


      $artifactFeed = 'https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v3/index.json'

      Write-Host "Converting PAT Token to secure string..."
      $password = ConvertTo-SecureString "$(AZDO-PAT)" -AsPlainText -Force

      Register-SecretVault -Name "TheSecretVault" -ModuleName Microsoft.PowerShell.SecretStore
      $storeConfiguration = @{
          Authentication = 'Password'
          PasswordTimeout = 3600 # 1 hour
          Interaction = 'None'
          Password = $password
          Confirm = $false
      }
      Set-SecretStoreConfiguration @storeConfiguration
      Unlock-SecretStore $password

      $accessToken = "$(System.AccessToken) " | ConvertTo-SecureString -AsPlainText -Force
      # $credsAzureDevopsServices = New-Object System.Management.Automation.PSCredential("xxx", $accessToken)
      $credsAzureDevopsServices = New-Object System.Management.Automation.PSCredential ("$(patUser)", $securePatToken)
      Set-Secret -Name "MyCredential" -Secret $credsAzureDevopsServices -Vault "TheSecretVault" 

      $CredentialInfo = [Microsoft.PowerShell.PSResourceGet.UtilClasses.PSCredentialInfo]::new('TheSecretVault', 'MyCredential')
      Register-PSResourceRepository -Name "PSGalleryUpstream" -Uri "$artifactFeed" -Credential $CredentialInfo
      Install-PSResource -Name "Az.Advisor" -Repository "PSGalleryUpstream" -TrustRepository


      # Write-Host "Install PSResourceGet Module"

      # # Install-PSResource -Name Microsoft.PowerShell.PSResourceGet
      # # # Install-Module Microsoft.PowerShell.PSResourceGet -Repository PSGallery -Force
      # # # Import-Module Microsoft.PowerShell.Security
      # # Import-Module Microsoft.PowerShell.PSResourceGet 

      # # Get-ChildItem -Recurse $(Build.ArtifactStagingDirectory)

      # $packagePath = "$(Build.ArtifactStagingDirectory)\src\PSRule.Rules.AzureDevOps"      

      # Write-Host $packagePath
      # Write-Host $publishFeed

      # Get-ChildItem $(Build.SourcesDirectory) -Recurse

      # Write-Host "Publishing package '$packagePath' to feed '$publishFeed'"
      # Publish-PSResource -Path $packagePath -Repository $publishFeed -ApiKey 123

  # - powershell: |
  #     Install-Module Microsoft.PowerShell.SecretManagement
  #     Install-Module Microsoft.PowerShell.SecretStore

  #     # Step 2: Create a Credential Object
  #     # Replace <YourUsername> and <YourPAT> with your Azure DevOps username and Personal Access Token
  #     $username = ""
  #     $patToken = "$patToken" | ConvertTo-SecureString -AsPlainText -Force
  #     $credentials = New-Object System.Management.Automation.PSCredential($username, $patToken)

  #     # # Step 3: Set Up Secret Management
  #     # # Register Secret Vault and Store Credentials
  #     # Register-SecretVault -Name "LocalVault" -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault
  #     # Set-Secret -Name "MyCredential" -Secret $credentials -Vault "LocalVault"

  #     # Step 4: Create a Credential Info Object
  #     $CredentialInfo = [Microsoft.PowerShell.PSResourceGet.UtilClasses.PSCredentialInfo]::new('LocalVault', 'MyCredential')

  #     # Step 5: Register the PowerShell Repository
  #     # Replace <YourOrganizationName>, <YourProjectName>, and <YourFeedName> with your Azure DevOps details
  #     Register-PSResourceRepository -Name "tcsnlps-ssc-set-psmod-dev-feed" `
  #         -Uri "https://pkgs.dev.azure.com/<organization>/ssc-set/_packaging/<organization>-ssc-set-psmod-dev-feed/nuget/v3/index.json" `
  #         -Trusted `
  #         -CredentialInfo $CredentialInfo

  #     # Step 6: Verify Repository Registration
  #     # List all registered repositories to confirm
  #     Get-PSResourceRepository

  #     $packagetPath = "C:\01-tcs\01-repos\01-projects\03-gdh\PSRule.Rules.AzureDevOps\src\PSRule.Rules.AzureDevOps"

  #     Publish-PSResource -Path $(packagePath) -Repository "<organization>-ssc-set-psmod-dev-feed" -Credential $credentials -ApiKey 123

  #     Publish-PSResource -Path .\scripts\ -Repository FabrikamFiberFeed -Credential $credentials -ApiKey az -verbose

  #     Publish-PSResource -Path $packagePath -Repository "<organization>-ssc-set-psmod-dev-feed" -Credential $credentials -ApiKey 123
