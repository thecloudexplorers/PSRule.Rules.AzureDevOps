# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main
  - users/wcamargo/*

pool:
  MSHosted-WorkloadsPool

  # vmImage: windows-latest

variables:
  - group: azdo-psrule-run

steps:
  - powershell: |
      # . "$(Build.ArtifactStagingDirectory)\src\helper-functions\Publish-ToAzureArtifactsPSRepo.ps1"        

      # Publish info
      $organization = "$(AZDO-ORGANIZATION)"
      $project = "$(project)"
      $publishFeed = "$(publishFeed)"


      $feedUrl = "https://pkgs.dev.azure.com/$organization/$project/_packaging/$publishFeed/nuget/v2"

      # Package info

      Get-ChildItem $(Build.ArtifactStagingDirectory) -Recurse


      $packagePath = "$(Build.ArtifactStagingDirectory)\src\PSRule.Rules.AzureDevOps"    
      $apiKey = "$(apiKey)"

      # Credentials to authenticate to AzDo
      $username = "$(patUser)"
      $patToken = "$(AZDO-PAT)"


      $variables = @{
          "organization" = $organization
          "project"      = $project
          "publishFeed"  = $publishFeed
          "feedUrl"      = $feedUrl
          "packagePath"  = $packagePath
          "apiKey"       = $apiKey
          "username"     = $username
          "patToken"     = $patToken
      }

      $missing = $variables.GetEnumerator() | Where-Object {
          -not $_.Value -or $_.Value -eq ''
      }

      if ($missing) {
          Write-Host "The following variables are null or empty:`n"
          $missing | ForEach-Object { Write-Host "- $($_.Key)" }
          exit 1
      } else {
          Write-Host "All required variables are set."
      }

      $SecretVault = "LocalVault"

      Write-Host "Importing Modules..."

      Install-Module -Name Microsoft.PowerShell.SecretStore -Repository PSGallery -Force
      Install-Module -Name Microsoft.PowerShell.SecretManagement -Repository PSGallery -Force
      Import-Module Microsoft.PowerShell.SecretStore
      Import-Module Microsoft.PowerShell.SecretManagement

      # Install-Module Microsoft.PowerShell.PSResourceGet -Repository PSGallery
      Install-Module -Name Microsoft.PowerShell.PSResourceGet -Repository PSGallery -Force -ErrorAction Stop
      Import-Module Microsoft.PowerShell.Security
      Import-Module Microsoft.PowerShell.PSResourceGet -RequiredVersion 1.1.1

      #endregion

      #region 1.1 - Create credential

      Write-Host "Creating credentials..."

      $patToken = $patToken | ConvertTo-SecureString -AsPlainText -Force
      $credentials = New-Object System.Management.Automation.PSCredential($username, $patToken)

      $RepositoryName = "TCSNLPSUpstream"

      #endregion

      #region 1.2 - Register Secret Vault

      Write-Host "Registering Secret Vault..."

      # Managing a SecretStore vault - https://learn.microsoft.com/en-us/powershell/utility-modules/secretmanagement/how-to/manage-secretstore?view=ps-modules
      # Use the SecretStore in automation - https://learn.microsoft.com/en-us/powershell/utility-modules/secretmanagement/how-to/using-secrets-in-automation?view=ps-modules


      if ($null -eq (Get-SecretVault -Name $SecretVault -ErrorAction SilentlyContinue)) { 
          Register-SecretVault -Name $SecretVault -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault    
      }

      # Disable authentication to run on script
      Reset-SecretStore -Authentication None -Interaction None -Force

      Get-SecretVault -Name $SecretVault

      Write-Host "Setting secrets..."

      Set-Secret -Name "MyCredential" -Secret $credentials -Vault $SecretVault

      #endregion

      #region 1.3 - Register PS Repository



      #endregion

      #region 2 - Publish

      # 

      # Unregister-PSRepository -Name "PowershellAzureDevopsServices" 



      if ($null -eq (Get-PSRepository -Name $RepositoryName -ErrorAction SilentlyContinue)) { 
          Write-Host "Registering PS Repository..."
          $repositoryParams = @{
              Name               = $RepositoryName
              SourceLocation     = $feedUrl
              InstallationPolicy = 'Trusted'
              Credential         = $credentials
          }
          
          Register-PSRepository @repositoryParams

          # Register-PSRepository -Name 'MyRepoName' 
          # -SourceLocation 'https://pkgs.dev.azure.com/[MyOrganization]/_packaging/[MyFeed]/nuget/v2' 
          # -InstallationPolicy Trusted -Credential $credential }


      }

      Write-Host "Publishing module to PS Repository..."

      Publish-PSResource -Path $packagePath -Repository $publishFeed -Credential $credentials -ApiKey 123456

      # Publish-ToAzureArtifactsPSRepo -Organization $organization  -Project $project -FeedName $publishFeed -RepositoryName $RepositoryName -Username $username -PatToken $patToken -PackagePath $packagePath -ApiKey $apiKey -SecretVault $SecretVault

  # - powershell: |
  #     Import-Module Microsoft.PowerShell.Security
  #     Install-Module -Name Microsoft.PowerShell.PSResourceGet -Scope CurrentUser

  #     # Import-Module Microsoft.PowerShell.PSResourceGet

  #     Write-Host "Converting PAT Token to secure string..."
  #     $securePatToken = ConvertTo-SecureString "$(AZDO-PAT)" -AsPlainText -Force

  #     Write-Host "Creating credential..."

  #     $credential = New-Object System.Management.Automation.PSCredential ("$(patUser)", $securePatToken)

  #     $publishFeed = "tcsnlps-ssc-set-psmod-dev-feed"

  #     Write-Host "Registering Nuget Repository..."

  #     Install-PackageProvider NuGet -Scope CurrentUser -Force > $null

  #     Write-Host "Registering Azure DevOps Artifacts as Upstream Repository..."

  #     if ($null -eq (Get-PSRepository -Name $(publishFeed) -ErrorAction SilentlyContinue))
  #     {
  #       Register-PSRepository -Name $(publishFeed) -SourceLocation "https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v2" -PublishLocation "https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v2" -InstallationPolicy Trusted -Credential $credential
  #     }

  #     $packagePath = "$(Build.ArtifactStagingDirectory)\src\PSRule.Rules.AzureDevOps"

  #     Write-Host $packagePath
  #     Write-Host $publishFeed

  #     Get-ChildItem $(Build.SourcesDirectory) -Recurse

  #     Write-Host "Publishing package '$packagePath' to feed '$publishFeed'"
  #     Publish-PSResource -Path $packagePath -Repository $publishFeed -ApiKey 123

  # - task: NuGetAuthenticate@1
  #   inputs:
  #     feedUrl: "https://pkgs.dev.azure.com/<organization>/ssc-set/_packaging/<organization>-ssc-set-psmod-dev-feed/nuget/v3/index.json"

  # - task: PowerShell@2
  #   inputs:
  #     targetType: "inline"
  #     script: |

  # - powershell: |
  #     # 1) Install core modules
  #     Install-Module PowerShellGet                         -Force -AllowClobber
  #     Install-Module Microsoft.PowerShell.SecretManagement -Force -AllowClobber
  #     Install-Module Microsoft.PowerShell.SecretStore      -Force -AllowClobber
  #     Install-Module Microsoft.PowerShell.PSResourceGet    -Force -AllowClobber
  #     Import-Module Microsoft.PowerShell.PSResourceGet

  #     # 2) Convert your PAT and the system access token to secure strings
  #     $patPassword       = ConvertTo-SecureString "$(AZDO-PAT)"           -AsPlainText -Force
  #     $systemAccessToken = ConvertTo-SecureString "$(System.AccessToken)" -AsPlainText -Force

  #     # 3) Ensure the SecretVault is registered
  #     if (-not (Get-SecretVault -Name 'TheSecretVault' -ErrorAction SilentlyContinue)) {
  #         Register-SecretVault -Name 'TheSecretVault' -ModuleName 'Microsoft.PowerShell.SecretStore'
  #         Write-Host 'Registered SecretVault "TheSecretVault".'
  #     }
  #     else {
  #         Write-Host 'SecretVault "TheSecretVault" already exists.'
  #     }

  #     # 4) Unlock the vault before configuration
  #     Unlock-SecretStore -Password $patPassword

  #     # 5) Idempotently configure the SecretStore (this may re-lock it)
  #     try {
  #         # First run: set password + desired settings
  #         Set-SecretStoreConfiguration `
  #             -Interaction     None `
  #             -PasswordTimeout 3600 `
  #             -Password        $patPassword `
  #             -Confirm:$false
  #         Write-Host 'SecretStore configured (initial password set).'
  #     }
  #     catch {
  #         if ($_.Exception.Message -match 'new password cannot be added') {
  #             # Subsequent runs: just update interaction & timeout
  #             Set-SecretStoreConfiguration `
  #                 -Interaction     None `
  #                 -PasswordTimeout 3600 `
  #                 -Confirm:$false
  #             Write-Host 'SecretStore configuration updated (password unchanged).'
  #         }
  #         else {
  #             throw
  #         }
  #     }

  #     # 6) Vault is now locked againâ€”unlock it for writing
  #     Unlock-SecretStore -Password $patPassword

  #     # 7) Store your DevOps PSCredential in the vault
  #     $credsAzureDevops = New-Object System.Management.Automation.PSCredential("$(patUser)", $systemAccessToken)
  #     Set-Secret -Name "MyCredential" -Secret $credsAzureDevops -Vault "TheSecretVault"

  #     # 8) Register the PSResource repo and install Az.Advisor
  #     $artifactFeed = 'https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v3/index.json'
  #     $credInfo     = [Microsoft.PowerShell.PSResourceGet.UtilClasses.PSCredentialInfo]::new('TheSecretVault','MyCredential')

  #     Register-PSResourceRepository -Name "PSGalleryUpstream" -Uri $artifactFeed -CredentialInfo $credInfo
  #     Install-PSResource -Name "Az.Advisor" -Repository "PSGalleryUpstream" -TrustRepository
  #   displayName: "Setup PSResource & SecretStore"

# - powershell: |
#     # Import-Module Microsoft.PowerShell.Security
#     Get-Module -ListAvailable -Name PowerShellGet -Refresh

#     # Install-Module -Name PowerShellGet -Force -AllowClobber

#     Install-Module -Name PowerShellGet -Force -AllowClobber

#     Install-Module Microsoft.PowerShell.SecretManagement -Force -AllowClobber
#     Install-Module Microsoft.PowerShell.SecretStore -Force -AllowClobber

#     # Install-Module Microsoft.PowerShell.PSResourceGet -Force
#     # # Import-Module Microsoft.PowerShell.Security
#     # Import-Module Microsoft.PowerShell.PSResourceGet

#     # Write-Host "Converting PAT Token to secure string..."
#     $securePatToken = ConvertTo-SecureString "$(AZDO-PAT)" -AsPlainText -Force

#     # Write-Host "Creating credential..."

#     # $credential = New-Object System.Management.Automation.PSCredential ("$(patUser)", $securePatToken)

#     # $publishFeed = "tcsnlps-ssc-set-psmod-dev-feed"

#     # Write-Host "Registering Nuget Repository..."

#     # Install-PackageProvider NuGet -Scope CurrentUser -Force > $null

#     # Write-Host "Registering Azure DevOps Artifacts as Upstream Repository..."

#     # if ($null -eq (Get-PSRepository -Name $(publishFeed) -ErrorAction SilentlyContinue))
#     # {
#     #   Register-PSRepository -Name $(publishFeed) -SourceLocation "https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v2" -PublishLocation "https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v2" -InstallationPolicy Trusted -Credential $credential
#     # }

#     # # /\ Above its working!

#     # Write-Host "Install PSResourceGet Module"

#     # # Install-PSResource -Name Microsoft.PowerShell.PSResourceGet
#     # # Install-Module Microsoft.PowerShell.PSResourceGet -Repository PSGallery -Force
#     # # Install-Module Microsoft.PowerShell.PSResourceGet -Force
#     # # Import-Module Microsoft.PowerShell.Security
#     # # Import-Module Microsoft.PowerShell.PSResourceGet

#     # Get-ChildItem -Recurse "C:\Users\VssAdministrator\AppData\Local"

#     # $packagePath = "$(Build.ArtifactStagingDirectory)\src\PSRule.Rules.AzureDevOps"

#     # Write-Host $packagePath
#     # Write-Host $publishFeed

#     # Get-ChildItem $(Build.SourcesDirectory) -Recurse

#     # Write-Host "Publishing package '$packagePath' to feed '$publishFeed'"
#     # Publish-PSResource -Path $packagePath -Repository $publishFeed -ApiKey 123

#     # # /\ Old version

#     # $artifactFeed = 'https://pkgs.dev.azure.com/<your org>/<you-project>/_packaging/<Feed-Name>/nuget/v3/index.json'
#     # $password = "tempPasswordToSecureTheSecretVault" | ConvertTo-SecureString -AsPlainText -Force
#     # Register-SecretVault -Name "TheSecretVault" -ModuleName Microsoft.PowerShell.SecretStore
#     # $storeConfiguration = @{
#     #     Authentication = 'Password'
#     #     PasswordTimeout = 3600 # 1 hour
#     #     Interaction = 'None'
#     #     Password = $password
#     #     Confirm = $false
#     # }
#     # Set-SecretStoreConfiguration @storeConfiguration
#     # Unlock-SecretStore $password

#     # $accessToken = "$env:SYSTEM_ACCESSTOKEN" | ConvertTo-SecureString -AsPlainText -Force
#     # $credsAzureDevopsServices = New-Object System.Management.Automation.PSCredential("xxx", $accessToken)
#     # Set-Secret -Name "MyCredential" -Secret $credsAzureDevopsServices -Vault "TheSecretVault"

#     # $CredentialInfo = [Microsoft.PowerShell.PSResourceGet.UtilClasses.PSCredentialInfo]::new('TheSecretVault', 'MyCredential')
#     # Register-PSResourceRepository -Name "PSGalleryUpstream" -Uri "$artifactFeed" -Credential $CredentialInfo
#     # Install-PSResource -Name "Az.Advisor" -Repository "PSGalleryUpstream" -TrustRepository

#     $artifactFeed = 'https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v3/index.json'

#     Write-Host "Converting PAT Token to secure string..."
#     $password = ConvertTo-SecureString "$(AZDO-PAT)" -AsPlainText -Force

#     if (-not (Get-SecretVault -Name 'TheSecretVault' -ErrorAction SilentlyContinue)) {
#         Register-SecretVault -Name 'TheSecretVault' -ModuleName 'Microsoft.PowerShell.SecretStore'
#         Write-Host 'SecretVault "TheSecretVault" has been registered.'
#     }
#     else {
#         Write-Host 'SecretVault "TheSecretVault" already exists.'
#     }

#     $secretVault = Get-SecretVault -Name "TheSecretVault"
#     if(-not($secretVault)){
#       # Register-SecretVault -Name "TheSecretVault" -ModuleName Microsoft.PowerShell.SecretStore
#       $storeConfiguration = @{
#           Authentication = 'Password'
#           PasswordTimeout = 3600 # 1 hour
#           Interaction = 'None'
#           Password = $password
#           Confirm = $false
#       }
#       Get-SecretStoreConfiguration

#       Set-SecretStoreConfiguration @storeConfiguration
#     }
#     Unlock-SecretStore $password

#     $accessToken = "$(System.AccessToken) " | ConvertTo-SecureString -AsPlainText -Force
#     # $credsAzureDevopsServices = New-Object System.Management.Automation.PSCredential("xxx", $accessToken)
#     $credsAzureDevopsServices = New-Object System.Management.Automation.PSCredential ("$(patUser)", $securePatToken)
#     Set-Secret -Name "MyCredential" -Secret $credsAzureDevopsServices -Vault "TheSecretVault"

#     $CredentialInfo = [Microsoft.PowerShell.PSResourceGet.UtilClasses.PSCredentialInfo]::new('TheSecretVault', 'MyCredential')
#     Register-PSResourceRepository -Name "PSGalleryUpstream" -Uri "$artifactFeed" -Credential $CredentialInfo
#     Install-PSResource -Name "Az.Advisor" -Repository "PSGalleryUpstream" -TrustRepository

#     # Write-Host "Install PSResourceGet Module"

#     # # Install-PSResource -Name Microsoft.PowerShell.PSResourceGet
#     # # # Install-Module Microsoft.PowerShell.PSResourceGet -Repository PSGallery -Force
#     # # # Import-Module Microsoft.PowerShell.Security
#     # # Import-Module Microsoft.PowerShell.PSResourceGet

#     # # Get-ChildItem -Recurse $(Build.ArtifactStagingDirectory)

#     # $packagePath = "$(Build.ArtifactStagingDirectory)\src\PSRule.Rules.AzureDevOps"

#     # Write-Host $packagePath
#     # Write-Host $publishFeed

#     # Get-ChildItem $(Build.SourcesDirectory) -Recurse

#     # Write-Host "Publishing package '$packagePath' to feed '$publishFeed'"
#     # Publish-PSResource -Path $packagePath -Repository $publishFeed -ApiKey 123

# - powershell: |
#     Install-Module Microsoft.PowerShell.SecretManagement
#     Install-Module Microsoft.PowerShell.SecretStore

#     # Step 2: Create a Credential Object
#     # Replace <YourUsername> and <YourPAT> with your Azure DevOps username and Personal Access Token
#     $username = ""
#     $patToken = "$patToken" | ConvertTo-SecureString -AsPlainText -Force
#     $credentials = New-Object System.Management.Automation.PSCredential($username, $patToken)

#     # # Step 3: Set Up Secret Management
#     # # Register Secret Vault and Store Credentials
#     # Register-SecretVault -Name "LocalVault" -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault
#     # Set-Secret -Name "MyCredential" -Secret $credentials -Vault "LocalVault"

#     # Step 4: Create a Credential Info Object
#     $CredentialInfo = [Microsoft.PowerShell.PSResourceGet.UtilClasses.PSCredentialInfo]::new('LocalVault', 'MyCredential')

#     # Step 5: Register the PowerShell Repository
#     # Replace <YourOrganizationName>, <YourProjectName>, and <YourFeedName> with your Azure DevOps details
#     Register-PSResourceRepository -Name "tcsnlps-ssc-set-psmod-dev-feed" `
#         -Uri "https://pkgs.dev.azure.com/<organization>/ssc-set/_packaging/<organization>-ssc-set-psmod-dev-feed/nuget/v3/index.json" `
#         -Trusted `
#         -CredentialInfo $CredentialInfo

#     # Step 6: Verify Repository Registration
#     # List all registered repositories to confirm
#     Get-PSResourceRepository

#     $packagetPath = "C:\01-tcs\01-repos\01-projects\03-gdh\PSRule.Rules.AzureDevOps\src\PSRule.Rules.AzureDevOps"

#     Publish-PSResource -Path $(packagePath) -Repository "<organization>-ssc-set-psmod-dev-feed" -Credential $credentials -ApiKey 123

#     Publish-PSResource -Path .\scripts\ -Repository FabrikamFiberFeed -Credential $credentials -ApiKey az -verbose

#     Publish-PSResource -Path $packagePath -Repository "<organization>-ssc-set-psmod-dev-feed" -Credential $credentials -ApiKey 123
