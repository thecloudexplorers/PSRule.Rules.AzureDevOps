# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

pool:
  vmImage: windows-latest

steps:
  # - task: NuGetAuthenticate@1
  #   inputs:
  #     feedUrl: "https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v3/index.json"

  # - task: PowerShell@2
  #   inputs:
  #     targetType: "inline"
  #     script: |

  - powershell: |
      Write-Host "Converting PAT Token to secure string"
      $securePatToken = $env:TOKEN | ConvertTo-SecureString -AsPlainText -Force
      $myCredentialsObject = New-Object System.Management.Automation.PSCredential($env:USER , $securePatToken)

      Write-Host "Registering Azure DevOps Artifacts as Upstream Repository"

      Register-PSRepository -Name "PSGalleryUpstream" -SourceLocation "https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v2" -PublishLocation "https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v2" -InstallationPolicy Trusted -Credential $myCredentialsObject

      Install-Module Microsoft.PowerShell.PSResourceGet -Repository PSGallery -Force
      # Import-Module Microsoft.PowerShell.Security
      Import-Module Microsoft.PowerShell.PSResourceGet 

      Write-Host $(packagePath)
      Write-Host $(publishFeed)

      Get-ChildItem $(Build.SourcesDirectory) -Recurse

      Publish-PSResource -Path $(packagePath) -Repository $(publishFeed) -ApiKey 123
    env:
      MY_MAPPED_ENV_VAR: $(mySecret) # the recommended way to map to an env variable
      # $env:USER
      USER: $patUser
      TOKEN: $patToken

  # - powershell: |
  #     Install-Module Microsoft.PowerShell.SecretManagement
  #     Install-Module Microsoft.PowerShell.SecretStore

  #     # Step 2: Create a Credential Object
  #     # Replace <YourUsername> and <YourPAT> with your Azure DevOps username and Personal Access Token
  #     $username = "wesley.camargo@TCSNLPS.onmicrosoft.com"
  #     $patToken = "$env:azdoDevopsAssessmentLocalToken" | ConvertTo-SecureString -AsPlainText -Force
  #     $credentials = New-Object System.Management.Automation.PSCredential($username, $patToken)

  #     # # Step 3: Set Up Secret Management
  #     # # Register Secret Vault and Store Credentials
  #     # Register-SecretVault -Name "LocalVault" -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault
  #     # Set-Secret -Name "MyCredential" -Secret $credentials -Vault "LocalVault"

  #     # Step 4: Create a Credential Info Object
  #     $CredentialInfo = [Microsoft.PowerShell.PSResourceGet.UtilClasses.PSCredentialInfo]::new('LocalVault', 'MyCredential')

  #     # Step 5: Register the PowerShell Repository
  #     # Replace <YourOrganizationName>, <YourProjectName>, and <YourFeedName> with your Azure DevOps details
  #     Register-PSResourceRepository -Name "tcsnlps-ssc-set-psmod-dev-feed" `
  #         -Uri "https://pkgs.dev.azure.com/tcsnlps/ssc-set/_packaging/tcsnlps-ssc-set-psmod-dev-feed/nuget/v3/index.json" `
  #         -Trusted `
  #         -CredentialInfo $CredentialInfo

  #     # Step 6: Verify Repository Registration
  #     # List all registered repositories to confirm
  #     Get-PSResourceRepository

  #     $packagetPath = "C:\01-tcs\01-repos\01-projects\03-gdh\PSRule.Rules.AzureDevOps\src\PSRule.Rules.AzureDevOps"

  #     Publish-PSResource -Path $(packagePath) -Repository "tcsnlps-ssc-set-psmod-dev-feed" -Credential $credentials -ApiKey 123

  #     Publish-PSResource -Path .\scripts\ -Repository FabrikamFiberFeed -Credential $credentials -ApiKey az -verbose

  #     Publish-PSResource -Path $packagePath -Repository "tcsnlps-ssc-set-psmod-dev-feed" -Credential $credentials -ApiKey 123
